// Code generated by go-bindata.
// sources:
// bindata/bindings.json
// bindata/monsters.json
// bindata/tiles.json
// DO NOT EDIT!

package gorl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataBindingsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd3\x5d\x4f\x83\x30\x14\x06\xe0\x7b\x7e\xc5\x09\xd7\xd6\x4c\x67\xfc\xd8\x6d\x87\x73\xc9\x36\x3f\xd0\x2c\x31\xde\x94\xd1\x01\x0e\x7a\x10\x0a\x6e\x1a\xff\xbb\x29\xa6\xd4\x2d\x27\xbb\x7d\xde\xd3\x37\xed\x21\x7c\x7b\x00\x00\xfe\xa9\x3f\x02\x7f\x8c\xa0\x50\xa7\x99\x4a\xfc\x93\x3f\x46\xc3\x33\xc4\x8d\x85\xb7\x66\x30\x18\xae\x8c\xf2\x3c\x2b\x22\x68\xca\xbd\x44\xba\x24\xc6\x4f\x65\x33\xce\xba\x23\x8f\x4d\xa6\x2d\x8d\xef\x97\x0b\x63\x73\x6c\xe5\xde\xec\x2c\xb8\x7d\xee\x83\x5c\xae\xfb\x13\x4f\xd3\xc9\x9d\x4b\xaa\x2c\x49\xfb\x28\x34\x1c\x8a\x56\x5a\x78\x79\xe8\x07\xdd\x0d\x33\x63\x53\xd5\x4a\xa5\xb1\xda\x59\xfd\x38\xbc\x59\xdd\x95\x69\xa1\x6b\x2b\x5f\x46\x5e\x45\x09\x61\x29\xf3\xdc\xea\xc8\x68\xb0\xd5\x52\xc5\x32\x86\x15\x16\x85\x50\xb1\x0d\xe7\x6c\x7b\x2c\x4e\xc9\x17\xbe\x93\x0b\xd9\x10\x4f\xc9\xe9\x3d\x5c\x90\xb5\xe7\x64\xed\x35\x51\x7b\x49\xd7\x72\x16\x91\xc5\x9c\x29\xb2\x9a\xb3\x92\x28\xe7\x6c\x4d\xd7\x5f\x19\x5e\x60\xa5\x53\x58\xca\xba\xe7\x1b\xc7\x81\x70\x7c\xd6\x7d\x1e\x6c\x0e\xa6\x87\x8e\xff\x4f\xef\xe8\xee\x86\xee\x8e\xe8\x6e\x45\x77\x27\x86\x27\x95\x88\x2c\xc4\xdd\x4f\x54\x61\xe9\x7b\x3f\xde\x6f\x00\x00\x00\xff\xff\x7f\x9e\x09\x65\x59\x03\x00\x00")

func bindataBindingsJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataBindingsJson,
		"bindata/bindings.json",
	)
}

func bindataBindingsJson() (*asset, error) {
	bytes, err := bindataBindingsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata/bindings.json", size: 857, mode: os.FileMode(420), modTime: time.Unix(1501346228, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataMonstersJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\xce\xbf\xae\x82\x30\x14\x06\xf0\x99\x3e\xc5\xc9\x99\x19\x4a\xb9\x7f\x92\x6e\xf7\x4a\x8c\x83\xba\xf8\x04\x47\x38\x2a\x01\x8a\xa9\xa0\x03\xe1\xdd\x0d\x45\x92\x06\x57\xd9\xbe\xaf\x5f\xdb\xfc\x3a\x01\x00\x80\x12\x35\x74\x22\xc0\x3d\x55\x8c\x1a\xb0\x35\x85\xa9\x1f\x06\x52\xcb\xd4\xb4\x96\x31\x14\x01\x1e\xae\x76\x87\x1a\x7e\x5f\x79\x3d\xe5\x7f\xba\x71\x42\x15\x9d\x87\xa7\x4a\x4d\x47\x7f\x2b\xd4\x10\xc9\xa1\x6e\xf2\x26\xc9\x53\x37\xbb\xbe\xe5\x3b\x97\xc3\x3a\x7e\xc5\x9c\xb9\xab\x52\x3a\x4d\x1f\x8e\xa8\x68\x86\xba\xb4\x15\x19\x5f\x12\x79\x12\xf5\x2e\x91\x1f\x93\xa8\x99\xa4\xa8\x8f\x75\x99\xf9\x94\xd8\xa3\x7c\x2d\x49\x89\x67\x94\xdc\x9c\xd8\x1a\x2a\x7d\xcc\xb7\x87\xf9\x59\x04\x23\x7a\xf1\x0c\x00\x00\xff\xff\x57\x88\xa9\x0d\x3a\x02\x00\x00")

func bindataMonstersJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataMonstersJson,
		"bindata/monsters.json",
	)
}

func bindataMonstersJson() (*asset, error) {
	bytes, err := bindataMonstersJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata/monsters.json", size: 570, mode: os.FileMode(420), modTime: time.Unix(1501284088, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataTilesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd4\xcf\x6a\xc3\x30\x0c\x06\xf0\x73\xfc\x14\xc2\xe7\x1e\x96\xfd\x5f\xdf\x60\x97\xb2\xc3\x5e\x40\x8b\x95\xd4\xa0\xc8\xc1\x76\x12\x46\xe9\xbb\x8f\x8c\x0e\x4a\xb4\xb1\xcd\xf4\xfa\x05\x7e\x48\x51\xbe\x1c\x4c\x65\xaf\xec\x16\x0e\xa6\xaa\xec\x0e\x7b\xb2\x5b\xb0\x79\x4f\x30\x05\xef\xec\x66\x49\x5f\x30\x25\x7c\xe3\xe5\x49\x8b\x9c\xe8\x33\x7c\x8d\x28\x69\xc0\x48\x92\xbf\x72\x53\x1d\x37\xa6\xb2\xf5\x5a\x4b\x81\xbd\x83\x19\x99\x8b\xbc\x6b\xe5\xe5\x20\x04\x2d\x87\x10\x15\x98\xe3\xf8\x9d\xb7\xc4\x27\xee\x66\xcd\x75\x11\x53\x2a\x80\x6e\x2f\x05\xdd\xe9\x05\xd1\xc7\x04\x4c\xe8\xbc\x74\x30\x0e\x05\xe8\xfd\x2f\xa8\x0b\xb3\x14\xb0\x0f\x8a\x25\x9c\x31\x93\xbe\xc4\x4f\xa7\x3d\xc3\x1e\xd7\x58\x1b\x29\xed\x8b\xb9\xa7\x35\xd7\xe0\x44\x40\x92\x23\x4a\x43\x05\xcb\xd6\xaa\x18\xa1\x21\x14\x28\x9e\xb0\x56\xdd\xf0\xfd\x70\x12\xa0\x0f\xa3\x64\xf4\xa2\x3f\xa1\x3f\xb5\x4e\xd5\x04\xa1\x8d\x9e\xc4\xf1\x3b\x4c\x9e\x19\xbb\xa2\x57\xa0\xea\xb2\xfc\x1b\x98\x72\xa6\x08\xcf\x65\x93\xaa\xe2\x9c\x91\xbb\x7f\x93\xe6\x68\x3e\x02\x00\x00\xff\xff\xbb\x4e\x2f\xdc\xc4\x04\x00\x00")

func bindataTilesJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataTilesJson,
		"bindata/tiles.json",
	)
}

func bindataTilesJson() (*asset, error) {
	bytes, err := bindataTilesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata/tiles.json", size: 1220, mode: os.FileMode(420), modTime: time.Unix(1501434478, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata/bindings.json": bindataBindingsJson,
	"bindata/monsters.json": bindataMonstersJson,
	"bindata/tiles.json": bindataTilesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata": &bintree{nil, map[string]*bintree{
		"bindings.json": &bintree{bindataBindingsJson, map[string]*bintree{}},
		"monsters.json": &bintree{bindataMonstersJson, map[string]*bintree{}},
		"tiles.json": &bintree{bindataTilesJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

