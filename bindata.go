// Code generated by go-bindata.
// sources:
// bindata/bindings.json
// bindata/monsters.json
// bindata/tiles.json
// DO NOT EDIT!

package gorl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataBindingsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x93\xcb\x4e\xeb\x30\x10\x86\xf7\x7d\x0a\x2b\xeb\xe3\xa3\x42\x11\x97\x6e\x58\xb8\x17\x2a\xf5\x02\x14\x54\x09\xb1\x71\x1a\x37\x31\x4d\x3c\xc1\x71\x42\x0b\xe2\xdd\x91\x53\xd9\xa6\xd5\x88\xed\xf7\xff\xfe\x64\x4f\x32\x5f\x1d\x42\x08\x89\xfe\x47\x7d\x12\x0d\x80\x28\x30\x99\x54\x69\xf4\xef\x80\x6f\x2d\x9e\x02\x6c\x1d\x78\xad\xbb\xdd\xde\xda\x52\x96\xcb\x22\x26\x75\x79\x94\x88\x90\x24\xf0\xa1\x5c\xc6\x68\x7b\xe4\xa1\x96\xc6\xa1\xc1\x62\x35\xb7\x6c\x06\x8d\x38\xea\x4e\x87\xa3\x27\x1f\xe4\x62\xe3\x4f\x3c\x4e\xc6\x77\x21\xd1\x32\xcd\x7c\xb4\xb4\x78\xc9\x1b\xe1\xc0\xf3\xbd\x2f\x86\x1b\x4a\xcb\x26\xaa\x11\xca\x80\xde\x3b\xfa\x7e\x7a\xb3\xaa\x95\x19\x6e\x2a\x47\x3e\x2d\x79\xe1\x25\x59\x96\x22\xcf\x1d\xed\x5b\x3a\xdc\x19\xa1\x12\x91\x90\x35\x14\x05\x57\x89\x0b\x67\x74\xf7\x57\x9c\xa1\x2f\x7c\x43\x07\xb2\x45\x9e\x92\xe3\x73\xb8\x40\xb5\xe7\xa8\xf6\x1a\xd1\x5e\xe2\x5a\x46\x63\x54\xcc\xa8\x42\xd5\x8c\x96\x88\x9c\xd1\x0d\xae\xbf\xb2\x78\x0e\xda\x64\x64\x25\x2a\x8f\x6f\x02\x1e\xf2\x80\xcf\xda\xcf\x03\xf5\x49\xbb\x17\xf0\xef\xf6\x1e\x77\xd7\xb8\x3b\xc6\xdd\x0a\x77\xa7\x16\x8f\x35\x8f\x1d\x38\xec\x45\xc6\x7d\x23\x69\xb7\x4a\x83\x9f\x41\x3b\x81\x91\xd4\xfe\x47\x05\x0b\x16\xa5\x50\x51\xe7\xbb\xf3\x13\x00\x00\xff\xff\x0a\x98\xa8\x7c\x8c\x03\x00\x00")

func bindataBindingsJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataBindingsJson,
		"bindata/bindings.json",
	)
}

func bindataBindingsJson() (*asset, error) {
	bytes, err := bindataBindingsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata/bindings.json", size: 908, mode: os.FileMode(420), modTime: time.Unix(1502222743, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataMonstersJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\xce\xbf\xae\x82\x30\x14\x06\xf0\x99\x3e\xc5\xc9\x99\x19\x4a\xb9\x7f\x92\x6e\xf7\x4a\x8c\x83\xba\xf8\x04\x47\x38\x2a\x01\x8a\xa9\xa0\x03\xe1\xdd\x0d\x45\x92\x06\x57\xd9\xbe\xaf\x5f\xdb\xfc\x3a\x01\x00\x80\x12\x35\x74\x22\xc0\x3d\x55\x8c\x1a\xb0\x35\x85\xa9\x1f\x06\x52\xcb\xd4\xb4\x96\x31\x14\x01\x1e\xae\x76\x87\x1a\x7e\x5f\x79\x3d\xe5\x7f\xba\x71\x42\x15\x9d\x87\xa7\x4a\x4d\x47\x7f\x2b\xd4\x10\xc9\xa1\x6e\xf2\x26\xc9\x53\x37\xbb\xbe\xe5\x3b\x97\xc3\x3a\x7e\xc5\x9c\xb9\xab\x52\x3a\x4d\x1f\x8e\xa8\x68\x86\xba\xb4\x15\x19\x5f\x12\x79\x12\xf5\x2e\x91\x1f\x93\xa8\x99\xa4\xa8\x8f\x75\x99\xf9\x94\xd8\xa3\x7c\x2d\x49\x89\x67\x94\xdc\x9c\xd8\x1a\x2a\x7d\xcc\xb7\x87\xf9\x59\x04\x23\x7a\xf1\x0c\x00\x00\xff\xff\x57\x88\xa9\x0d\x3a\x02\x00\x00")

func bindataMonstersJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataMonstersJson,
		"bindata/monsters.json",
	)
}

func bindataMonstersJson() (*asset, error) {
	bytes, err := bindataMonstersJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata/monsters.json", size: 570, mode: os.FileMode(420), modTime: time.Unix(1501284088, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataTilesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x4f\x6a\xeb\x40\x0c\x87\xd7\xf6\x29\x84\xd7\x59\x3c\xe7\xf5\x6f\x6e\xd0\x4d\xe8\xa2\x17\x50\x3d\xb2\x33\x30\x91\xcc\xcc\x38\xa1\x84\xdc\xbd\xb8\x75\x21\xb5\x52\x9a\x88\x6e\x65\xf8\x2c\x8d\xf4\xfd\x0e\x65\x51\xfd\xab\x56\x70\x28\x8b\xa2\x5a\xe3\x96\xaa\x15\x54\x79\x43\xb0\x13\xef\xaa\xc5\x58\x7d\xc6\x94\xf0\x35\x8c\x5f\x5a\x0c\x89\x3e\x8a\x2f\x11\x39\xf5\x18\x89\xf3\x57\xbd\x2c\x8e\x8b\xb2\xa8\xea\x39\x2d\x49\xf0\x0e\xf6\x18\x82\x89\xb7\x54\xbc\x2c\x4c\xd0\x06\x91\xa8\x80\x39\x0e\xe7\x78\x63\x79\xc2\xfd\x9f\xe3\xba\x88\x29\x19\x40\x37\x7f\x05\xba\xd5\x03\xa2\x8f\x09\x02\xa1\xf3\xdc\xc1\xd0\x1b\xa0\x77\xbf\x40\x9d\xec\xd9\x80\xbd\x57\x58\xc2\x3d\x66\xd2\x9b\xf8\x69\xb5\x27\xb0\x87\x39\xac\x8d\x94\x36\x66\xdc\xe3\x1c\xd7\xe0\x8e\x80\x38\x47\xe4\x86\x0c\xc3\xd6\x4a\x0c\x69\x08\x19\xcc\x1d\xd6\xca\x0d\xbf\xed\x27\x02\x6c\x65\xe0\x8c\x9e\xf5\x09\x5d\x64\x9d\xd2\x04\xa1\x8d\x9e\xd8\x85\x37\xd8\xf9\x10\xb0\x33\x3d\x81\xd2\x65\xcc\x86\x40\x39\x53\x84\x27\x5b\xa7\x4a\x9c\x13\xe4\xda\x86\x54\x0a\x21\x4c\xa9\x23\xe2\x88\xc1\x89\xc4\x05\x34\x41\x12\x19\x43\x4d\xf9\x74\xf6\x0f\xd2\x93\xc5\xaa\x5a\x69\x85\xf0\x99\x72\xfd\xb8\xb9\xcb\x6f\xed\x5b\xcb\x4a\x2f\x84\x76\xba\x31\xd3\xf1\x2a\xbf\x90\x01\x43\xbe\xa2\xbd\x13\xda\x52\xb9\x85\x90\xfa\x38\x70\x07\x39\xe2\xb5\x89\x57\x1e\xcb\xf7\x00\x00\x00\xff\xff\xd3\x8d\xa1\x95\xc9\x06\x00\x00")

func bindataTilesJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataTilesJson,
		"bindata/tiles.json",
	)
}

func bindataTilesJson() (*asset, error) {
	bytes, err := bindataTilesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata/tiles.json", size: 1737, mode: os.FileMode(420), modTime: time.Unix(1502224274, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata/bindings.json": bindataBindingsJson,
	"bindata/monsters.json": bindataMonstersJson,
	"bindata/tiles.json": bindataTilesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata": &bintree{nil, map[string]*bintree{
		"bindings.json": &bintree{bindataBindingsJson, map[string]*bintree{}},
		"monsters.json": &bintree{bindataMonstersJson, map[string]*bintree{}},
		"tiles.json": &bintree{bindataTilesJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

