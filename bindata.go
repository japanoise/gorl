// Code generated by go-bindata.
// sources:
// bindata/monsters.json
// bindata/tiles.json
// DO NOT EDIT!

package gorl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataMonstersJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xce\xb1\xce\x82\x30\x14\x05\xe0\xb9\x7d\x8a\xe6\xce\x0c\x50\xfe\x5f\x93\x6e\x2a\x31\x0e\xea\xe2\x13\x5c\xf1\xaa\x04\xb8\x98\x0a\x3a\x10\xde\xdd\x80\x91\x40\xe3\x64\x18\xcf\x39\x6d\xbe\x5b\x4b\x01\x3e\x18\x55\x4b\x21\x60\x8f\x39\x81\x51\x50\x71\xca\xc5\x93\x55\x6c\x09\xcb\xca\x12\x78\xed\x7a\xb8\xd9\x1d\x18\x35\xff\x84\x75\x1f\x96\x78\xa7\x08\x73\xbc\xb4\xbf\xb5\xee\xbb\xc5\x0a\x8c\x0a\xfc\x2e\x6f\x92\x32\x4a\xe2\xee\xc1\xbb\xd8\xd2\x83\xb2\x76\x97\xa2\xf1\xa4\x80\xc0\xbd\xe2\x5a\xe5\xc8\x23\x3a\x18\xd2\xfa\x0b\xed\xff\x46\x6b\x97\x4e\x8b\x63\x91\x9d\x46\x76\x38\xb4\xff\xa6\xb3\x43\xd7\x4e\xf8\x4c\x96\x31\x1b\xe9\xff\x43\x7d\x36\x8d\x2e\x1b\xf9\x0a\x00\x00\xff\xff\x5c\x75\x22\xef\xfe\x01\x00\x00")

func bindataMonstersJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataMonstersJson,
		"bindata/monsters.json",
	)
}

func bindataMonstersJson() (*asset, error) {
	bytes, err := bindataMonstersJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata/monsters.json", size: 510, mode: os.FileMode(420), modTime: time.Unix(1500975945, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataTilesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd1\x4b\x6a\xc4\x30\x0c\xc6\xf1\xb5\x7d\x0a\xe1\x75\x16\x7d\x3f\x72\x88\xd2\x45\x2f\xa0\xc6\x4a\x62\x70\xed\x20\x39\xc9\x22\xe4\xee\x25\xa5\x85\x62\xb7\x0c\x63\x66\xfb\x17\xfc\x40\x7c\x9b\x56\xe6\xca\xb4\xb0\x69\xa5\xcc\x0b\x7e\x90\x69\xc1\xa4\x91\x60\x89\xce\x9a\xe6\xa8\xaf\x28\x82\xef\xfe\xb8\xf4\xe8\x85\xbe\xe2\x1b\x63\x90\x09\x99\x42\xfa\xe9\x5a\xed\x8d\x56\xe6\x3a\xd7\x24\x7a\x67\x61\x45\xef\xab\xbc\x9b\xc2\x4b\x31\x10\xf4\x3e\x46\x2e\xc0\xc4\xf3\x5f\xde\x91\xbf\xb9\xdb\x9c\x1b\x18\x45\x2a\xa0\xbb\x4b\x41\xf7\xe5\x83\xe8\x58\xc0\x13\x5a\x17\x06\x98\xa7\x0a\xf4\xe1\x04\x6a\xe3\x1a\x2a\xd8\xc7\x82\x25\x5c\x31\x51\xb9\xc4\x7f\xd3\xfe\xc2\x9e\x72\xac\x67\x92\xb1\x9a\x7b\xce\xb9\x0e\x17\x02\x0a\x89\x31\x74\x74\xe6\xb3\x7a\xd7\x9f\x01\x00\x00\xff\xff\x67\x46\xa1\xe1\x1b\x03\x00\x00")

func bindataTilesJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataTilesJson,
		"bindata/tiles.json",
	)
}

func bindataTilesJson() (*asset, error) {
	bytes, err := bindataTilesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata/tiles.json", size: 795, mode: os.FileMode(420), modTime: time.Unix(1500979352, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata/monsters.json": bindataMonstersJson,
	"bindata/tiles.json": bindataTilesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata": &bintree{nil, map[string]*bintree{
		"monsters.json": &bintree{bindataMonstersJson, map[string]*bintree{}},
		"tiles.json": &bintree{bindataTilesJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

